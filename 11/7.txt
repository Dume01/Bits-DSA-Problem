#include <iostream>
#include <cstring>
using namespace std;

int countPalindromicSubstrings(string s) {
    int n = s.length();
    bool dp[n][n];
    memset(dp, false, sizeof(dp));

    int count = 0;

    // Single character strings are palindromes
    for (int i = 0; i < n; i++) {
        dp[i][i] = true;
        count++;
    }

    // Check for palindromic substrings of length 2
    for (int i = 0; i < n-1; i++) {
        if (s[i] == s[i+1]) {
            dp[i][i+1] = true;
            count++;
        }
    }

    // Check for palindromic substrings of length 3 and above
    for (int len = 3; len <= n; len++) {
        for (int i = 0; i < n-len+1; i++) {
            int j = i + len - 1;
            if (s[i] == s[j] && dp[i+1][j-1]) {
                dp[i][j] = true;
                count++;
            }
        }
    }

    return count;
}

int main() {
    string s;
    cin >> s;
    cout << countPalindromicSubstrings(s) << endl;
    return 0;
}
