// C++ program for the above approach

#include <bits/stdc++.h>
using namespace std;

// Function to find the lexicographically
// largest permutation by sequentially
// inserting the array elements
void largestPermutation(int arr[], int N)
{

	// Stores the current state of
	// the new array
	deque<int> p;

	// Stores the current maximum
	// element of array arr[]
	int mx = arr[0];
	p.push_back(arr[0]);

	// Iterate the array elements
	for (int i = 1; i < N; i++) {

		// If the current element is
		// smaller than the current
		// maximum, then insert
		if (arr[i] > mx)
			p.push_back(arr[i]);

		// If the current element is
		// at least the current maximum
		else {
			p.push_front(arr[i]);

			// Update the value of
			// the current maximum
			mx = arr[i];
		}
	}

	// Print resultant permutation
	for (auto i : p)
		cout << i << " ";
}

// Driver Code
int main()
{
	int arr[] = { 3,1,4,2 };
	int N = sizeof(arr) / sizeof(arr[0]);

	largestPermutation(arr, N);

	return 0;
}
